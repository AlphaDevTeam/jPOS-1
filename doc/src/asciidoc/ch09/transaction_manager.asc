== TransactionManager

The +TransactionManager+ is a jPOS Service that monitors a Space queue waiting
for transactions to be processed. These transactions are expected to be
+Serializable+ objects, but they are in most jPOS applications actually an
+org.jpos.transaction.Context+ object.

The following image shows a typical scenario:

* A QServer (or a QMUX) receives a message and delegate its handling to an +ISORequestListener+
  implementation
* The +ISORequestListener+ creates an instance of a +Context+, puts there some information relevant
  to the transaction (such as a reference to the received +ISOMsg+ and the originating +ISOSource+)
  and place it in a well known space, using a well known +key+. We use the space as a _queue_
  so we call it _queue_, but it's just a regular entry in the space under a well known name.
* The +TransactionManager+ picks the entry from the space (using a regular +in+ operation) 
  and runs the previously described two-phase commit protocol on the configured participants.

image:images/tm_example.png[width="75%",alt="TransactionManager Example"]

Each participant is instantiated and configured just once by the TransactionManager at
init time, they use the _Flyweight pattern_, but the TransactionManager uses several
simultaneous sessions to handle transactions.

image:images/tm_sessions.png[width="75%",alt="TransactionManager Sessions"]

[IMPORTANT]
===========
In the previous paragraph we mention that the TransactionManager use the
_Flyweight pattern_.  It is extremely important to understand the pattern
before implementing participants. Each participant is instantiated once, but
multiple sessions can run simultaneously. In addition, sessions can be paused
and continued. All session information must be stored in the Context, which the
transaction manager appropriately sets before calling a participant, but *never
ever* in member variables.  
===========

=== Configuration

The TransactionManager is implemented by +org.jpos.transaction.TransactionManager+
but +QFactory.properties+ defines a couple of handy names for it:

* +txnmgr+, or
* +transaction-manager+

So a TM configuration can look like this:

[source,xml]
------------
<txnmgr name="myTM" logger="Q2" realm="TM">
  <property name="queue" value="myTMQueue" />
  ...
  ...
</txnmgr>
------------

or

[source,xml]
------------
<transaction-manager name="myTM" logger="Q2" realm="TM">
  <property name="queue" value="myTMQueue" />
  ...
  ...
</transaction-manager>
------------

[NOTE]
======
The +name+ attribute is not technically required, if ommitted, the transaction manager would
get registered in the +NameRegistrar+ using its root-element name (i.e.: +txnmgr+ or
+transaction-manager+ depending on your configuration). But if you are to deploy more than
one TM in the same Q2 instance, the second one would get a +duplicate name+ error, and your
XML QBean descriptor would get renamed to +.DUP+. Using the +name+ attribute with different
names solves the problem.
======

The TM requires a mandatory property (+queue+) and honors some optional ones, 
which have sensible defaults.

* *queue* +
This is the Space-based _queue_ where the TM looks for transactions to be processed.
As described above, these transactions are actually +Serializable+ objects, typically
an instance of +org.jpos.transaction.Context+. This is a mandatary property.

* *space* +


