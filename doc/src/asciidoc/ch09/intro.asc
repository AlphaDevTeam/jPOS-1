The TransactionManager (also called _TM_ in this document) is just another Q2
Service, but it is such an important component in a jPOS based application that
it stands out, deserving its own chapter.

jPOS is typically used to implement mission-critical applications that
have to carefully deal with error conditions.

When you access a web page and a transient network error occurs,
you just hit the *reload* button on your browser. By contrast, a complex 
financial transaction involves a lot of activities such as contacting remote 
hosts, perform PIN-based validations and pin-block translations, database logging, 
etc. 

So, if something goes wrong or your system just dies due to a power failure,
it's more complicated than simply hitting the *reload* button: you have to reverse 
the impact of whatever actions had been committed until the failure point.

The +org.jpos.transaction+ package - along with the Q2-based *TransactionManager*
implementation - provides the necessary framework and components required to deal 
with the previous scenario. This combination also fosters code reuse and 
_componentization_.

The key class is the 
link:http://jpos.org/doc/javadoc/org/jpos/transaction/TransactionParticipant.html[TransactionParticipant]
which exposes the following interface:

[source,java]
-------------

    public interface TransactionParticipant extends TransactionConstants {
        public int  prepare (long id, Serializable context);
        public void commit  (long id, Serializable context);
        public void abort   (long id, Serializable context);
    }


   (for the records, TransactionConstants provides the following constants)
  
    public interface TransactionConstants {
        public static final int ABORTED  = 0;
        public static final int PREPARED = 1;
        public static final int RETRY    = 2;
        public static final int PAUSE    = 4;
        public static final int NO_JOIN  = 0x40;
        public static final int READONLY = 0x80;
    }

-------------

The TransactionManager implementation _drives_ the transaction by calling all of its 
participants' +prepare+ method. If all of them return +PREPARED+ (indicating that
they are ready to proceed with the transaction), then the transaction moves
to the _COMMITTING_ phase, at which point the TransactionManager will call all of the 
participants' +commit+ method.

If one of the participants' +prepare+ method returns +ABORTED+, then the transaction
moves into an _ABORTING_ phase, and all the participants' +abort+ methods would get called.

