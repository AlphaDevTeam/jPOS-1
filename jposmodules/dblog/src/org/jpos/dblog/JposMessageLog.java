package org.jpos.dblog;


import java.io.*;
import java.sql.*;

 /**
  * JposMessageLog Value Object.
  * This class is value object representing database table jposMessageLog
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * jposMessageLog column handling code.
  * This sourcecode has been generated by FREE DaoGen generator version 2.2.2.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class JposMessageLog implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int msgId;
    private String incomingMsg;
    private String transformMsg;
    private String replyMsg;
    private String outgoingMsg;
    private Timestamp dateAdd;



    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public JposMessageLog () {

    }

    public JposMessageLog (int msgIdIn) {

          this.msgId = msgIdIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getMsgId() {
          return this.msgId;
    }
    public void setMsgId(int msgIdIn) {
          this.msgId = msgIdIn;
    }

    public String getIncomingMsg() {
          return this.incomingMsg;
    }
    public void setIncomingMsg(String incomingMsgIn) {
          this.incomingMsg = incomingMsgIn;
    }

    public String getTransformMsg() {
          return this.transformMsg;
    }
    public void setTransformMsg(String transformMsgIn) {
          this.transformMsg = transformMsgIn;
    }

    public String getReplyMsg() {
          return this.replyMsg;
    }
    public void setReplyMsg(String replyMsgIn) {
          this.replyMsg = replyMsgIn;
    }

    public String getOutgoingMsg() {
          return this.outgoingMsg;
    }
    public void setOutgoingMsg(String outgoingMsgIn) {
          this.outgoingMsg = outgoingMsgIn;
    }

    public Timestamp getDateAdd() {
          return this.dateAdd;
    }
    public void setDateAdd(Timestamp dateAddIn) {
          this.dateAdd = dateAddIn;
    }



    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int msgIdIn,
          String incomingMsgIn,
          String transformMsgIn,
          String replyMsgIn,
          String outgoingMsgIn,
          Timestamp dateAddIn) {
          this.msgId = msgIdIn;
          this.incomingMsg = incomingMsgIn;
          this.transformMsg = transformMsgIn;
          this.replyMsg = replyMsgIn;
          this.outgoingMsg = outgoingMsgIn;
          this.dateAdd = dateAddIn;
    }


    /**
     * hasEqualMapping-method will compare two JposMessageLog instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(JposMessageLog valueObject) {

          if (valueObject.getMsgId() != this.msgId) {
                    return(false);
          }
          if (this.incomingMsg == null) {
                    if (valueObject.getIncomingMsg() != null)
                           return(false);
          } else if (!this.incomingMsg.equals(valueObject.getIncomingMsg())) {
                    return(false);
          }
          if (this.transformMsg == null) {
                    if (valueObject.getTransformMsg() != null)
                           return(false);
          } else if (!this.transformMsg.equals(valueObject.getTransformMsg())) {
                    return(false);
          }
          if (this.replyMsg == null) {
                    if (valueObject.getReplyMsg() != null)
                           return(false);
          } else if (!this.replyMsg.equals(valueObject.getReplyMsg())) {
                    return(false);
          }
          if (this.outgoingMsg == null) {
                    if (valueObject.getOutgoingMsg() != null)
                           return(false);
          } else if (!this.outgoingMsg.equals(valueObject.getOutgoingMsg())) {
                    return(false);
          }
          if (this.dateAdd == null) {
                    if (valueObject.getDateAdd() != null)
                           return(false);
          } else if (!this.dateAdd.equals(valueObject.getDateAdd())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass JposMessageLog, mapping to table jposMessageLog\n");
        out.append("Persistent attributes: \n");
        out.append("msgId = " + this.msgId + "\n");
        out.append("incomingMsg = " + this.incomingMsg + "\n");
        out.append("transformMsg = " + this.transformMsg + "\n");
        out.append("replyMsg = " + this.replyMsg + "\n");
        out.append("outgoingMsg = " + this.outgoingMsg + "\n");
        out.append("dateAdd = " + this.dateAdd + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        JposMessageLog cloned = new JposMessageLog();

        cloned.setMsgId(this.msgId);
        cloned.setIncomingMsg(new String(this.incomingMsg));
        cloned.setTransformMsg(new String(this.transformMsg));
        cloned.setReplyMsg(new String(this.replyMsg));
        cloned.setOutgoingMsg(new String(this.outgoingMsg));
        cloned.setDateAdd((Timestamp)this.dateAdd.clone());


        return cloned;
    }



    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.2.2";
    }

}

