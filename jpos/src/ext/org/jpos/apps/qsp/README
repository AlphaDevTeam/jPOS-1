$Id$

QSP in under development, there's no docs and no support yet.
It's being CVSed just for backup purposes.

You need Xalan and Xerces installed on your 'ext' directory
(have a look at jpos/ext/README) in order to build QSP.

Please remove 'apps/qsp' directory if it happens to break your
'ext' build.

What is it anyway?  

QSP will be first jPOS out-of-the-box ready-to-run application, an
ISO-8583 configurable switch with XSLT support and many other features.
You're welcome to join jpos-dev list to talk about it.

---[ Original 26 Mar 2000 post on jpos-dev list ]---

From: Alejandro Revilla <apr@cs.com.uy>
To: jpos-dev@onelist.com
Date: Sun, 26 Mar 2000 12:46:21 -0300
Subject: jPOS switch application proposal

We have many components within org.jpos.iso and we have successfully
assembled them to set up several ISO-8583 switch installations.
So great, so far.

We identified a "pattern" on those installations, all of them have to
assemble ISOChannels, ISOMUXes, Loggers, visual components, etc.

We plan to open a new package under org.jpos named 'apps' where
we will start to put out-of-the-box, ready-to-run applications.

First one will be 'jpos-switch' (org.jpos.apps.switch).

Imagine a configuration with two acquirers ("AnyCard" and "ACME") 
and a dialup server (i.e. NACs).

(please use a monospaced font to view next "diagram")

+-----------+                 +-------------+                 +--------------+
| ACME Host |--[AcmeChannel]--| jPOS Switch |--[AnyChannel]---| AnyCard Host |
+-----------+                 |             |                 +--------------+
                              +-------------+
                             /       |       \
                            /        |        \
                           /  +-------------+  \
     Database Logging<----/   |  NAC Server |   \----> MonitoringChannel(s)
                              +-------------+
                               | | | | | | |

In this example jPOS Switch will have to be configured to have 3 
Channels one for Acme Host interchange, another one to handle AnyCard 
host and a third one that will serve dialup connections, and a couple of MUXes
around them.

Here is a proposed XML configuration file (this is not a final version,
there's not even a DTD, we have to talk a lot about this but for now it's
here just to get the idea)

<jpos-switch>
 <logger name="default">
  <listener class="org.jpos.util.RotateLogListener"
            file="jpos.log" copies="10" window="86400"/>
 </logger>

 <channel name="acme" 
          class="org.jpos.iso.ISO87BChannel" 
          packager="org.jpos.iso.ISO87BPackager"
          type="client" host="server.acme.com" port="8000"
          logger="default" realm="acme.channel">

  <filter class="org.jpos.iso.XSLTFilter" source="acme.xsl" />
  <filter class="com.company.your.FilterA" direction="incoming"/>
  <filter class="com.company.your.FilterB" direction="outgoing"/>
  <filter class="org.jpos.iso.db.ChannelLogger" db="ACMECHANNEL" />
 </channel>

 <channel name="anycard" 
          class="org.jpos.iso.VAPChannel" 
          packager="org.jpos.iso.ISO87BPackager"
          type="client" host="server.anycard.com" port="8000"
          logger="default" realm="anycard.channel">

  <filter class="org.jpos.iso.XSLTFilter" source="anycard.xsl" />
  <filter class="com.company.your.FilterC" direction="incoming"/>
  <filter class="com.company.your.FilterD" direction="outgoing"/>
  <filter class="org.jpos.iso.db.ChannelLogger" db="ANYCARDCHANNEL" />
 </channel>

 <channel name="dialup" 
          class="org.jpos.iso.SpaceChannel" 
          packager="org.jpos.iso.ISO87BPackager"
          type="server" port="8000"
          logger="default" realm="dialup.channel">

  <filter class="com.company.your.FilterE" direction="incoming"/>
  <filter class="com.company.your.FilterF" direction="outgoing"/>
  <filter class="org.jpos.iso.db.ChannelLogger" db="DIALUPCHANNEL" />
 </channel>

 <isomux name="acme" logger="default" realm="acme.mux"
         server-channel="acme">
  <listener class="com.company.your.ListenerA"/>
  <listener class="com.company.your.ListenerB"/>
 </isomux>

 <isomux name="anycard" logger="default" realm="anycard.mux"
         server-channel="anycard" >
  <listener class="com.company.your.ListenerC"/>
  <listener class="com.company.your.ListenerD"/>
 </isomux>

 <isoserver name="dialup" logger="default" realm="dialup.server"
  channel="dialup">
  <listener class="com.company.your.ListenerE"/>
  <listener class="com.company.your.ListenerF"/>
 </isoserver>

 <user-task class="com.company.your.LogonTask" />
 <user-task class="com.company.your.EchoTester" />
</jpos-switch>

There are several new things here:

 - Named components. In order to "bind" at runtime switch's components
   we have to provide a name to MUXes, Loggers, Channels, etc. We'll
   have some kind of Registrar(s) class(es) (singleton holding a Map)

 - ISOServer: it's kinda ISOMUX without server channel. All incoming
   connections/messages will trigger listeners that will be able
   to route incoming messages to desired destinations
   (channels/muxes/applications)

 - user-task: It will start any number of user-tasks (to handle
   for example Logon, EchoTests, generate Cutovers, etc)

 - Current ISOMUX have just one ISORequestListener per MUX instance;
   we will add the ability to register more than one listener that
   will be called one at a time.

 - Filters: We will add "filters" to ISOChannels. Any number of them.
   A filter will have the chance to modify an ISOMsg. It will be
   possible to write an XSLT capable filter (as Scott has suggested)
   that will enable easy ISO-8583 dialect mapping. A filter can also
   just Log incoming/outgoing traffic to an SQL database or just
   apply some masks (using ISOMsg's clone/merge capabilities)

 - SpaceChannel: with a couple of jPOS switches running on different
   machines and JINI's JavaSpace running there it would be easy to
   setup a "fault tolerant" installation and do some load balancing.
   Logging can go thru JavaSpaces as well. This is not limited to
   JavaSpaces, we can build a TSpaces implementation as well and
   a JMS based channel too. Persistent Space based installations
   will allow on-the-fly system re-configuration without message
   loss. 

 - TeeChannel. We don't want our swing based visual components running
   on switch's JVM. A TeeChannel will copy all traffic to its listeners.
   Visual components can run remotely, possibly as an Applet within
   a browser.

I would like to get some feedback on this proposal. Do you think such
an application would be usefull on your installations or you prefer to
continue using jPOS as a library?

--Alejandro

